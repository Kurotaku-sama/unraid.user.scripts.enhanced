Menu="Utilities"
Title="User Scripts Enhanced"
Icon="file-text-o"
---
<? require_once "/usr/local/emhttp/plugins/user.scripts.enhanced/php/config_loader.php";

function render_select_field($title, $id, $variable, $options = ["yes" => "Yes", "no" => "No"], $class = "narrow setting") {
    echo "
    <dl>
        <dt>{$title}:</dt>
        <dd>
            <select id=\"{$id}\" name=\"{$id}\" class=\"{$class}\">";

    foreach ($options as $value => $label) {
        $selected = ($variable == $value) ? "selected" : "";
        echo "
                <option value=\"{$value}\" {$selected}>{$label}</option>";
    }

    echo "
            </select>
        </dd>
    </dl>";
}

if (!is_dir("/usr/local/emhttp/plugins/user.scripts")) {
    echo "<div class='plugin-warning'>
            <strong>IMPORTANT:</strong> This Plugin is an <u>UI Enhancement</u> of the Plugin <a href='/Apps?search=User Scripts Andrew Zawadzki'>\"User Scripts\" by Andrew Zawadzki (Squidly271).</a><br>
            The original \"User Scripts\" plugin <u>must be installed</u> for this to work!
          </div>";
}
?>
<link type="text/css" rel="stylesheet" href="<?=autov("/plugins/$plugin/styles/page_settings.css")?>">

<!-- Form -->
<form method="POST" action="/update.php" target="progressFrame">
    <input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin?>.cfg">
    <input type="hidden" id="command" name="#command" value="">

    <!-- Enable Categories -->
    <? render_select_field("Enable Plugin", "enabled", $cfg_enabled); ?>

    <!-- Categories Section -->
    <div class="title"><span class="left"><i class="fa fa-folder-o title"></i>Categories</span></div>

    <!-- View Mode Selection -->
    <? render_select_field("Default view mode", "default_view_mode", $cfg_view_mode, [
        "list" => "List View",
        "panel" => "Panel View"
    ]); ?>

    <blockquote class="inline_help">
        <p>This determines which mode new categories will use by default.<br>
        This can be adjusted individually for each category on the Userscripts page.<br>
        Uncategorized scripts will always use this mode.</p>
    </blockquote>

    <!-- Collapse Categories by default -->
    <? render_select_field("Collapse new categories by default", "default_collapsed", $cfg_default_collapsed); ?>

    <!-- Collapse unsorted scripts -->
    <? render_select_field("Collapse unsorted scripts", "uncategorized_collapsed", $cfg_uncategorized_collapsed); ?>

    <!-- Capitalized category names -->
    <? render_select_field("Capitalized category names", "capitalized", $cfg_capitalized); ?>

    <!-- Enable search function -->
    <? render_select_field("Enable search function", "enable_search", $cfg_enable_search); ?>

    <!-- Save delay -->
    <? render_select_field("Save delay (in seconds)", "save_delay", $cfg_save_delay, array_combine(range(0, 10), range(0, 10))); ?>

    <blockquote class="inline_help">
        <p>Recommended: 3-5 seconds. Instant saving (0) is not recommended.<br>
        The delay prevents saving on every minor action.<br>
        Keep the script page open when the saving panel appears in the bottom left, unless you want to undo changes like deleting a category!</p>
    </blockquote>

    <!-- Custom CSS -->
    <dl>
        <dt>Custom CSS:</dt>
        <dd><input type="text" id="custom_css" name="custom_css" class="narrow setting" value="<?=$cfg_custom_css?>"></dd>
    </dl>

    <blockquote class="inline_help">
        <p>Depending on the theme you use, you may need to adjust a bit of CSS yourself for a perfect fit.<br>
        Otherwise, the default uses the Dynamix color theme: Black theme.<br>
        All CSS must be in a single line, and quotation marks should be avoided.</p>
    </blockquote>

    <div class="title"><span class="left"><i class="fa fa-eye-slash title"></i>Hide default Elements</span></div>

    <!-- Hide Description Option -->
    <? render_select_field("Hide description", "hide_description", $cfg_hide_description, [
        "without" => "Only without description",
        "yes" => "Hide all",
        "no" => "No"
    ]); ?>

    <!-- Hide empty lines -->
    <? render_select_field("Hide empty lines", "cfg_hide_empty_lines", $cfg_cfg_hide_empty_lines); ?>

    <blockquote class="inline_help">
        <p>This option hides empty <code>&lt;p&gt;</code> and <code>&lt;hr&gt;</code> tags to reduce visual clutter and make the page appear more compact.</p>
    </blockquote>

    <!-- Hide "What is cron" -->
    <? render_select_field("Hide \"What is cron\"", "hide_what_is_cron", $cfg_hide_what_is_cron); ?>

    <!-- Hide Credits -->
    <? render_select_field("Hide Credits", "hide_credits", $cfg_hide_credits); ?>

    <!-- Hide "How to add scripts" Button -->
    <? render_select_field("Hide \"How to add scripts Button\"", "hide_how_to_add_scripts", $cfg_hide_how_to_add_scripts); ?>

    <!-- Hide Help -->
    <? render_select_field("Hide \"For help with this plugin\"", "hide_help", $cfg_hide_help); ?>

    <!-- URLs Section -->
    <div class="title"><span class="left"><i class="fa fa-link title"></i>URLs</span></div>

    <p>Define up to 2 custom URLs where the script should be active in case you use Custom Tab.</p>

    <!-- Default URL (Cannot be changed) -->
    <dl>
        <dt>Default URL (Cannot be changed):</dt>
        <dd><input type="text" id="url_default" name="url_default" value="<?=$cfg_url_default?>" readonly class="narrow setting"></dd>
    </dl>

    <!-- Custom URL 1 -->
    <dl>
        <dt>Custom URL 1:</dt>
        <dd><input type="text" id="url_custom_1" name="url_custom_1" value="<?=$cfg_url_custom_1?>" class="narrow setting"></dd>
    </dl>

    <!-- Custom URL 2 -->
    <dl>
        <dt>Custom URL 2:</dt>
        <dd><input type="text" id="url_custom_2" name="url_custom_2" value="<?=$cfg_url_custom_2?>" class="narrow setting"></dd>
    </dl>

    <!-- Apply & Done Buttons -->
    <input id="btnApply" type="submit" value="Apply" disabled>
    <input type="button" value="Done" onclick="window.location.href='/Settings';">
    <input type="button" value="Open Userscripts" onclick="window.location.href='/Settings/Userscripts';">
</form>



<!-- Export Section -->
<div class="title"><span class="left"><i class="fa fa-file-archive-o title"></i>Export</span></div>

<div>
    Click the buttons below to download a ZIP file containing your scripts or the configuration itself.<br>
    <br>
    - <strong>Export as Raw</strong>: Downloads the scripts exactly as they are stored on the USB stick.<br>
    - <strong>Export as Bash Scripts</strong>: Downloads the scripts as ready-to-use <code>.sh</code> files. Script names longer than 50 characters will be shortened.<br>
    - <strong>Export Config</strong>: Downloads the plugin configuration files.<br>
    - <strong>Export Categories</strong>: Downloads the plugin categories configuration.<br>
    <br>
    <strong>Info:</strong> Chromium-based browsers (e.g., Chrome, Edge) might block the download. If the download doesn't start, you might need to allow the download manually.<br>
    <br>
    If you uninstall the plugin, all configuration and category data will be deleted. <br>
    Therefore, it's recommended to back up the config and categories beforehand if you plan to reinstall the plugin later.<br>
    You can restore them by placing the backed-up files into <code>/boot/config/plugins/user.scripts.enhanced</code>.
</div>
<input type="button" id="btn_export_raw" value="Export as Raw" onclick="export_data(this, 'raw')">
<input type="button" id="btn_export_sh" value="Export as Bash Scripts" onclick="export_data(this, 'bash')">
<input type="button" id="btn_export_config" value="Export Config" onclick="export_data(this, 'config')">
<input type="button" id="btn_export_categories" value="Export Categories" onclick="export_data(this, 'categories')">



<!-- Miscellaneous Section -->
<div class="title"><span class="left"><i class="fa fa-cogs title"></i>Miscellaneous</span></div>

<p>
    Use the buttons below to perform various maintenance tasks. Click on each button for more information about its function.<br>
    <strong>Info:</strong> These actions are irreversible. Make sure to back up your data before proceeding.<br>
</p>

<!-- Reset config to default -->
<dl class="centered-dt">
    <dt>Reset config to default:</dt>
    <dd><input type="button" id="btn_reset_config" value="Start" onclick="reset_plugin_data(this, 'config')"></dd>
</dl>
<blockquote class="inline_help">
    <p>This will reset all configuration settings on this page to their default values.</p>
</blockquote>

<!-- Delete all categories -->
<dl class="centered-dt">
    <dt>Reset all categories:</dt>
    <dd><input type="button" id="btn_reset_all_categories" value="Start" onclick="reset_plugin_data(this, 'categories')"></dd>
</dl>
<blockquote class="inline_help">
    <p>This will delete the <code>categories.json</code> file, removing all categories from the plugin.<br>
</blockquote>

<!-- Delete "/tmp/user.scripts/" folder -->
<dl class="centered-dt">
    <dt>Delete "/tmp/user.scripts/" folder:</dt>
    <dd><input type="button" id="btn_delete_tmp_userscripts" value="Start" onclick="delete_tmp_userscripts(this)"></dd>
</dl>
<blockquote class="inline_help">
    <p>This will delete the "/tmp/user.scripts/" folder and all its contents.<br>
    This is useful because old scripts that were already deleted might still exist in this folder until a server reboot.<br>
    This button forces the cleanup.</p>
</blockquote>

<!-- Delete description files without description -->
<dl class="centered-dt">
    <dt>Delete description files without description:</dt>
    <dd><input type="button" id="btn_delete_description_files_without_description" value="Start" onclick="delete_description_files_without_description(this)"></dd>
</dl>
<blockquote class="inline_help">
    <p>This will delete all "description" files that contain the default text "No description".</p>
</blockquote>

<!-- Show not matching script names -->
<dl class="centered-dt">
    <dt>Show not matching script names:</dt>
    <dd><input type="button" id="btn_get_not_matching_scriptnames" value="Start" onclick="get_not_matching_scriptnames(this)"></dd>
</dl>
<blockquote class="inline_help">
    <p>This will check which script folders do not match their corresponding "name" file.</p>
</blockquote>

<!-- Show duplicate script names -->
<dl class="centered-dt">
    <dt>Show duplicate script names:</dt>
    <dd><input type="button" id="btn_get_duplicate_scriptnames" value="Start" onclick="get_duplicate_scriptnames(this)"></dd>
</dl>
<blockquote class="inline_help">
    <p>This will check for duplicate script names in the "/boot/config/plugins/user.scripts/scripts/" folder.</p>
</blockquote>





<script>
document.querySelectorAll("#url_custom_1, #url_custom_2").forEach(input => {
    // Block backslashes (\) and quotes (") in real-time
    input.addEventListener("input", () => {
        input.value = input.value.replace(/^ |[\\"]/g, ""); // Remove leading spaces and unwanted characters
    });

    // Clean up the input on focusout
    input.addEventListener("focusout", () => {
        let value = input.value.trim(); // Trim whitespace
        if (value === "" || value === "/") { // Reset if empty or just "/"
            input.value = "";
            return;
        }
        if (!value.startsWith("/")) value = "/" + value; // Ensure it starts with "/"
        input.value = value.replace(/\/+/g, "/"); // Remove duplicate slashes
    });
});

function export_data(trigger, type) {
    disable_button(trigger);
    // Trigger the download
    window.location.href = `/plugins/<?=$plugin?>/php/export.php?plugin=<?=$plugin?>&type=${type}`;
}

function confirmation_swal(title, text, callback) {
    swal({
        title: title,
        text: text,
        html: true,
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        closeOnConfirm: false,
        dangerMode: true
    }, function(confirm) {
        if (!confirm) return;
        callback();
    });
}

function reset_plugin_data(trigger, type) {
    disable_button(trigger);
    let title = "Are you sure?"
    let text;
    switch (type) {
        case "config":
            text = "Do you really want to reset the configuration to default?<br>This action cannot be undone!";
            break;
        case "categories":
            text = "Do you really want to reset all categories?<br>This action cannot be undone!";
            break;
        default:
            console.error("Invalid type:", type);
            return;
    }

    confirmation_swal(title, text, async function() {
        try {
            const response = JSON.parse(await $.get(`/plugins/<?=$plugin?>/php/config_reset.php`, {
                plugin: "<?=$plugin?>",
                type: type
            }));
            if (response.error)
                throw new Error(response.error);
            else if (response.success)
                swal("Success", response.success, "success");
            else if (response.warning)
                swal("Warning", response.warning, "warning");
            else
                throw new Error("Invalid response from server");
        } catch (error) {
            console.error("❌ Error:", error);
            swal("Error", error || "An unknown error occurred.", "error");
        }
    });
}

function delete_tmp_userscripts(trigger) {
    disable_button(trigger);
    confirmation_swal(
        "Are you sure?",
        "Do you really want to delete the /tmp/user.scripts/ folder?<br>This action cannot be undone!",
        async function() {
            try {
                const response = JSON.parse(await $.get("/plugins/<?=$plugin?>/php/tmp_delete.php"));
                if (response.error)
                    throw new Error(response.error);

                swal("Success", "The folder was deleted successfully.", "success");
            } catch (error) {
                console.error("❌ Error:", error);
                swal("Error", error || "An unknown error occurred.", "error");
            }
        }
    );
}

async function delete_description_files_without_description(trigger) {
    disable_button(trigger);
    confirmation_swal(
        "Are you sure?",
        "Do you really want to delete description files without description?<br>This action cannot be undone!",
        async function() {
            try {
                swal({
                    title: "Please wait...",
                    text: "Deleting description files without description.",
                    type: "info",
                });

                const response = JSON.parse(await $.get("/plugins/<?=$plugin?>/php/delete_description_files_without_description.php"));
                if (response.error)
                    throw new Error(response.error);

                // Determine the icon and message based on the results
                const icon = response.deleted_files.length > 0 ? "success" : "info";
                const message = response.deleted_files.length > 0
                    ? `The following description files were deleted:\n\n${response.deleted_files.map(file => `${file}`).join("\n")}`
                    : "No description files without description were found.";

                swal({
                    title: icon === "success" ? "Success" : "Info",
                    text: message,
                    type: icon,
                });
            } catch (error) {
                console.error("❌ Error:", error);
                swal("Error", error || "An unknown error occurred.", "error");
            }
        }
    );
}

async function get_not_matching_scriptnames(trigger) {
    disable_button(trigger);
    try {
        swal({
            title: "Please wait...",
            text: "Checking for script folders that do not match their 'name' file.",
            type: "info"
        });

        const response = JSON.parse(await $.get("/plugins/<?=$plugin?>/php/get_not_matching_scriptnames.php"));
        if (response.error)
            throw new Error(response.error);

        // Create list items for not matching script names
        if(response.not_matching.length > 0) {
            let not_matching = response.not_matching.map(folder =>
                `<li>"${folder.old_name}" <span class="li-arrow">→</span> "${folder.new_name}"</li>`
            ).join("");

            swal({
                title: "Not Matching Script Names",
                text: `
                    The following script folders do not match their 'name' file:<br><br>
                    <ul id="ul-output"><li class="li-headline">Folder Name → Name of Script</li>${not_matching}</ul>
                `,
                html: true,
                type: "info"
            });
        }
        else
        swal({
            title: "No mismatches found",
            text: `All folder names correctly match their corresponding script names.`,
            type: "success"
        });
    } catch (error) {
        console.error("❌ Error:", error);
        swal("Error", error || "An unknown error occurred.", "error");
    }
}

async function get_duplicate_scriptnames(trigger) {
    disable_button(trigger);
    try {
        swal({
            title: "Please wait...",
            text: "Checking for duplicate script names.",
            type: "info"
        });

        const response = JSON.parse(await $.get("/plugins/<?=$plugin?>/php/get_duplicate_scriptnames.php"));
        if (response.error)
            throw new Error(response.error);

        // Determine the icon and message based on the results
        const icon = Object.keys(response.duplicates).length > 0 ? "success" : "info";
        let message = Object.keys(response.duplicates).length > 0
            ? "The following script names are duplicated:<br><br>"
            : "No duplicate script names found.";

        // Build the message with script names and folder names
        if (Object.keys(response.duplicates).length > 0) {
            message += `<ul id="ul-output">`;
            for (const [scriptName, folders] of Object.entries(response.duplicates)) {
                message += `<ul><li class="li-headline">Name: ${scriptName}</li>`;
                folders.forEach(folder => {
                    message += `<li>&nbsp;- ${folder}</li>`;
                });
                message += `</ul></li>`;
            }
            message += `</ul>`;
        }

        swal({
            title: "Duplicate Script Names",
            text: message,
            html: true,
            type: icon
        });
    } catch (error) {
        console.error("❌ Error:", error);
        swal("Error", error.message || "An unknown error occurred.", "error");
    }
}

function disable_button(trigger) {
    const btn = $(trigger);
    btn.prop("disabled", true);
    btn.removeAttr("onclick");
}
</script>